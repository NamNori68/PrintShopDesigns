@page "/addDesign-Label"
@page "/addDesign-Label/{DesignID:int}"
@inject iDesignService designService
@inject IProductService productService
@inject ICustomerService customerService
@inject iColorService colorService
@inject iMachineService machineService
@inject Microsoft.AspNetCore.Components.NavigationManager navigationManager

<h2>Add Label Design</h2>
<hr />

<RadzenStack Gap="1rem" Style="position: relative">
    <RadzenRow>
        <RadzenColumn Size="4">
            <label style="font-size: 16px">Design #: <strong>@(_design.KingDesignID)</strong></label><br />
        </RadzenColumn>
        <RadzenColumn Size="4" Style="text-align: center">
            <label hidden="@IsArchiveHidden" style="font-size: 20px; color: red;"><strong>ARCHIVED</strong></label>
        </RadzenColumn>
        <RadzenColumn Size="4" Style="text-align: right">
            <label style="font-size: 16px">Created: <strong>@(createdLabel)</strong></label><br/>
            <label hidden="@IsHidden" style="font-size: 16px">Updated: <strong>@(updatedLabel)</strong></label>
        </RadzenColumn>
    </RadzenRow>

    <RadzenRow>
        <RadzenColumn Size="6">
            <RadzenCard Style="height: 375px">
                <RadzenText TextStyle="Radzen.Blazor.TextStyle.Subtitle1" TagName="Radzen.Blazor.TagName.H1" Text="@_productType"></RadzenText><br />
                <RadzenDropDown Name="products" Style="width: 400px" @bind-Value=@_design.Item Data=@_productNames Change="@OnProductChosen"></RadzenDropDown><br /><br />

                <RadzenLabel Text="Color" /><br />
                <RadzenDropDown Name="color" Style="width: 400px" @bind-Value=@_design.Color Data="@_productColors"></RadzenDropDown><br /><br />

                <RadzenLabel Text="Hold" /><br />
                <RadzenCheckBox @bind-Value=@_design.Hold></RadzenCheckBox>Yes/No<br /><br />

                <RadzenLabel Text="Machines" /><br />
                <RadzenCheckBoxList Data="@_machines" @bind-Value=@_values TValue="int" TextProperty="MachineName" ValueProperty="MachineId" class="mb-5" />
            </RadzenCard>
        </RadzenColumn>
        <RadzenColumn Size="6">
            <RadzenCard Style="height: 375px">
                <RadzenText TextStyle="Radzen.Blazor.TextStyle.Subtitle1" TagName="Radzen.Blazor.TagName.H1" Text="Customer"></RadzenText><br />
                <RadzenDropDown Name="CustomerName" Style="width: 400px" @bind-Value=@_design.Customer Data=@_customerNames></RadzenDropDown><br /><br />
            </RadzenCard>
        </RadzenColumn>
    </RadzenRow>

    <RadzenRow>
        <RadzenColumn Size="12">
            <RadzenCard>
                <RadzenText TextStyle="Radzen.Blazor.TextStyle.Subtitle1" TagName="Radzen.Blazor.TagName.H1" Text="Design Details"></RadzenText><br />
                <RadzenLabel Text="Label Position" /><br /><br/>
                <RadzenRadioButtonList TValue="int" @bind-Value=@_design.LabelPosition TextProperty="LabelPosition" Orientation="Radzen.Orientation.Horizontal">
                    <Items>
                        <RadzenRadioButtonListItem Text="@_topSide" Value="1" />
                        <RadzenRadioButtonListItem Text="@_underSide" Value="2" />
                    </Items>
                </RadzenRadioButtonList><br />
                <RadzenLabel Text="Description" /><br />
                <RadzenTextBox Style="width: 900px" @bind-Value="_design.Description"></RadzenTextBox><br /><br />
                <table width="100%">
                    <tr>
                        <td>
                            <RadzenLabel Text="Weight" /><br />
                            <RadzenTextBox @bind-Value="_design.Weight"></RadzenTextBox>
                        </td>
                        <td align="center">
                            <RadzenLabel Text="UPC #" /><br />
                            <RadzenTextBox @bind-Value="_design.UPC"></RadzenTextBox>
                        </td>
                        <td align="right">
                            <RadzenLabel Text="Customer Item Code" /><br />
                            <RadzenTextBox @bind-Value="_design.CustomerItemCode"></RadzenTextBox>
                        </td>
                    </tr>
                </table>
            </RadzenCard>
        </RadzenColumn>
    </RadzenRow>

    <RadzenRow>
        <RadzenColumn Size="12">
            <RadzenCard>
                <RadzenText TextStyle="Radzen.Blazor.TextStyle.Subtitle1" TagName="Radzen.Blazor.TagName.H1" Text="Notes"></RadzenText><br />
                <RadzenTextArea Style="width: 900px" @bind-Value="_design.Notes"></RadzenTextArea><br /><br />
            </RadzenCard>
        </RadzenColumn>
    </RadzenRow>
</RadzenStack>
<br />
<div class="form-group">
    <RadzenButton Click="@CreateDesign" Text="Save" Icon="add_circle_outline" ButtonStyle="ButtonStyle.Primary"></RadzenButton>
    <RadzenButton Click="@cancel" Text="Cancel" Icon="highlight_off" ButtonStyle="Radzen.ButtonStyle.Warning"></RadzenButton>
    <RadzenButton Click="@clone" Text="Clone" Icon="cached" ButtonStyle="Radzen.ButtonStyle.Secondary" Style="margin-left: 50px"></RadzenButton>
    <RadzenButton Click="@print" hidden="@IsArchived" Text="Print" Icon="assessment" ButtonStyle="Radzen.ButtonStyle.Info" Style="margin-left: 25px"></RadzenButton>
</div>

@code {
    Design _design;
    IList<Product>? _products;
    IList<Customer>? _customers;
    IList<Color> _colors;
    IList<Machine> _machines;
    IEnumerable<Int32> _values;
    IEnumerable<string> _productNames;
    IEnumerable<string> _productColors;
    IEnumerable<string> _customerNames;
    IEnumerable<Machine> _usedMachines;
    string _productType;
    string _topSide;
    string _underSide;

    [Parameter]
    public int DesignID{ get; set; }

    private bool IsHidden { get; set; }
    private bool IsArchiveHidden { get; set; }
    private bool IsArchived { get; set; }
    private string createdLabel { get; set; }
    private string updatedLabel { get; set; }
    bool _newDesign;
    int _nextID;
    string _kingDesignID;
    string productValue = "Select Product";
    string customerValue = "Select Customer";
    string colorValue = "Select Color";

    protected override async Task OnInitializedAsync()
    {
        //Populate the Product Section
        _products = await productService.ListAll();
        _productNames = _products.Select(c => c.ProductName);

        // if we select a product type that's a lid, then we auto-select "Topside" and hide the "Underside" option of the radio button in the Customer Section

        //Populate the Customer Section
        _customers = await customerService.ListAll();
        _customerNames = _customers.Select(c => c.CustomerName);

        //Populate the Color List
        _colors = await colorService.ListAll();
        _productColors = _colors.Select(c => c.ColorName);

        //Populate the possible Machines
        var _machinesTask = await machineService.ListAllPrint();

        _machines = _machinesTask;

        IsArchiveHidden = true;
        IsArchived = false;

        // if designid is 0 then we're coming in to create a brand new design
        if (DesignID == 0)
        {
            _newDesign = true;
            _design = new Design();
            _productType = "Product";

            _nextID = await designService.GetNextId();
            _design.KingDesignID = "L-" + _nextID.ToString() + "-A";
            _design.Archived = false;

            createdLabel = DateOnly.FromDateTime(DateTime.Today).ToString();
            IsHidden = true;
        } else { // else we have a designid passed in as a page parameter, so we get that design in order to populate the page
            _newDesign = false;
            _design = await designService.GetById(DesignID);

            createdLabel = DateOnly.FromDateTime(_design.Created).ToString();
            _productType = "Product - " + await productService.GetTypeByName(_design.Item);

            SetLabels(_productType);

            if (_design.Updated.Year == 0001)
            {
                IsHidden = true;
            }
            else
            {
                updatedLabel = DateOnly.FromDateTime(_design.Updated).ToString();
                IsHidden = false;
            }

            if (_design.Archived == true)
                IsArchiveHidden = false;
            IsArchived = true;
        }

        _usedMachines = await machineService.ListAllUsed(_design.DesignID);
        _values = _usedMachines.Select(c => c.MachineId);
    }

    protected async Task CreateDesign()
    {
        var _newId = 0;

        if (_newDesign)
        {
            _design.Type = "L";
            await designService.Create(_design);
            _newId = await designService.GetByKingId(_design.KingDesignID);

            _design.DesignID = _newId;
        }
        else
        {
            await designService.Update(_design);
            // First wipe out all machines that are used for this design
            await machineService.Clear(_design.DesignID);
        }

        // now simply add the ones that are checked.  this way we don't screw with what may have been un-checked
        foreach (int _machineId in _values)
        {
            await machineService.Add(_machineId, _design.DesignID);
        }

        navigationManager.NavigateTo("/Designs");
    }

    void cancel()
    {
        navigationManager.NavigateTo("/Designs");
    }

    protected async Task clone()
    {
        // cannot clone an archived design.
        if (!_design.Archived)
        {
            await designService.Clone(_design);

            var _cloneId = await designService.GetByKingId(_design.KingDesignID);

            _usedMachines = await machineService.ListAllUsed(_design.DesignID);
            _values = _usedMachines.Select(c => c.MachineId);

            foreach (int _machineId in _values)
            {
                await machineService.Add(_machineId, _cloneId);
            }
        }

        navigationManager.NavigateTo("/Designs");
    }

    protected async Task print()
    {
        navigationManager.NavigateTo("/LabelReportViewer/" + DesignID);
    }

    protected async Task OnProductChosen()
    {
        _productType = "Product - " + await productService.GetTypeByName(_design.Item);

        SetLabels(_productType);
    }

    private void SetLabels(string _type)
    {
        if (_type.Substring(10, 3) == "Lid")
        {
            // disable Machine 9 since it doesn't involve lids

            // label position only "Topside/Underside"
            _topSide = "Topside";
            _underSide = "Underside";
        }
        else
        {
            // disable machines 8 and 10 since they don't involve containers

            // label position only "FrontSide/Backside"
            _topSide = "Frontside";
            _underSide = "Backside";
        }
       
    }
}
